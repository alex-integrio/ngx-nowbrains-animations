/***********************************************************
 **  @project
 **  @file
 **  @author Brice Daupiard <brice.daupiard@nowbrains.com>
 **  @Date 05/08/2022
 **  @Description
 ***********************************************************/
import { animate, group, query, style, transition, trigger } from "@angular/animations";
const ANIMATION_TYPE_CUBIC_BEZIER = 'cubic-bezier(0.20, 0.4, 0, 1)';
const ANIMAION_DURATION = 750;
const TRANSLATE_X = 105;
export const SlideRightAndLeft = [
    trigger('SlideRightAndLeft', [
        transition(':increment', group([
            query(':enter', [
                style({ transform: `translateX(${TRANSLATE_X}%)` }),
                animate(`${ANIMAION_DURATION}ms ${ANIMATION_TYPE_CUBIC_BEZIER}`, style({ transform: 'translateX(0%)' }))
            ]),
            query(':leave', [
                animate(`${ANIMAION_DURATION}ms ${ANIMATION_TYPE_CUBIC_BEZIER}`, style({ transform: `translateX(-${TRANSLATE_X}%)` }))
            ], { optional: true })
        ])),
        transition(':decrement', group([
            query(':enter', [
                style({ transform: `translateX(-${TRANSLATE_X}%)`, opacity: 1 }),
                animate(`${ANIMAION_DURATION}ms ${ANIMATION_TYPE_CUBIC_BEZIER}`, style({ transform: 'translateX(0%)' }))
            ]),
            query(':leave', [
                animate(`${ANIMAION_DURATION}ms ${ANIMATION_TYPE_CUBIC_BEZIER}`, style({ transform: `translateX(${TRANSLATE_X}%)` }))
            ], { optional: true })
        ])),
    ])
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpZGVJbk91dC5hbmltYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbm93YnJhaW5zLWFuaW1hdGlvbnMvc3JjL2xpYi9jb3JlL2FuaW1hdGlvbnMvU2xpZGVJbk91dC5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs2REFNNkQ7QUFFNUQsT0FBTyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFdEYsTUFBTSwyQkFBMkIsR0FBRywrQkFBK0IsQ0FBQztBQUNwRSxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUM5QixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFFeEIsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUc7SUFDL0IsT0FBTyxDQUFDLG1CQUFtQixFQUFFO1FBQzNCLFVBQVUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDO1lBQzdCLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ2QsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGNBQWMsV0FBVyxJQUFJLEVBQUMsQ0FBQztnQkFDakQsT0FBTyxDQUFDLEdBQUcsaUJBQWlCLE1BQU0sMkJBQTJCLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO2FBQ3ZHLENBQUM7WUFDRixLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxHQUFHLGlCQUFpQixNQUFNLDJCQUEyQixFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGVBQWUsV0FBVyxJQUFJLEVBQUMsQ0FBQyxDQUFDO2FBQ3JILEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUM7WUFDN0IsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDZCxLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsZUFBZSxXQUFXLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUM7Z0JBQzlELE9BQU8sQ0FBQyxHQUFHLGlCQUFpQixNQUFNLDJCQUEyQixFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFDLENBQUMsQ0FBQzthQUN2RyxDQUFDO1lBQ0YsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDZCxPQUFPLENBQUMsR0FBRyxpQkFBaUIsTUFBTSwyQkFBMkIsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxjQUFjLFdBQVcsSUFBSSxFQUFDLENBQUMsQ0FBQzthQUNwSCxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1NBQ3JCLENBQUMsQ0FBQztLQUNKLENBQUM7Q0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiAgQHByb2plY3RcclxuICoqICBAZmlsZVxyXG4gKiogIEBhdXRob3IgQnJpY2UgRGF1cGlhcmQgPGJyaWNlLmRhdXBpYXJkQG5vd2JyYWlucy5jb20+XHJcbiAqKiAgQERhdGUgMDUvMDgvMjAyMlxyXG4gKiogIEBEZXNjcmlwdGlvblxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gaW1wb3J0IHthbmltYXRlLCBncm91cCwgcXVlcnksIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyfSBmcm9tIFwiQGFuZ3VsYXIvYW5pbWF0aW9uc1wiO1xyXG5cclxuIGNvbnN0IEFOSU1BVElPTl9UWVBFX0NVQklDX0JFWklFUiA9ICdjdWJpYy1iZXppZXIoMC4yMCwgMC40LCAwLCAxKSc7XHJcbiBjb25zdCBBTklNQUlPTl9EVVJBVElPTiA9IDc1MDtcclxuIGNvbnN0IFRSQU5TTEFURV9YID0gMTA1O1xyXG4gXHJcbiBleHBvcnQgY29uc3QgU2xpZGVSaWdodEFuZExlZnQgPSBbXHJcbiAgIHRyaWdnZXIoJ1NsaWRlUmlnaHRBbmRMZWZ0JywgW1xyXG4gICAgIHRyYW5zaXRpb24oJzppbmNyZW1lbnQnLCBncm91cChbXHJcbiAgICAgICBxdWVyeSgnOmVudGVyJywgW1xyXG4gICAgICAgICBzdHlsZSh7dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgke1RSQU5TTEFURV9YfSUpYH0pLFxyXG4gICAgICAgICBhbmltYXRlKGAke0FOSU1BSU9OX0RVUkFUSU9OfW1zICR7QU5JTUFUSU9OX1RZUEVfQ1VCSUNfQkVaSUVSfWAsIHN0eWxlKHt0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDAlKSd9KSlcclxuICAgICAgIF0pLFxyXG4gICAgICAgcXVlcnkoJzpsZWF2ZScsIFtcclxuICAgICAgICAgYW5pbWF0ZShgJHtBTklNQUlPTl9EVVJBVElPTn1tcyAke0FOSU1BVElPTl9UWVBFX0NVQklDX0JFWklFUn1gLCBzdHlsZSh7dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgtJHtUUkFOU0xBVEVfWH0lKWB9KSlcclxuICAgICAgIF0sIHtvcHRpb25hbDogdHJ1ZX0pXHJcbiAgICAgXSkpLFxyXG4gICAgIHRyYW5zaXRpb24oJzpkZWNyZW1lbnQnLCBncm91cChbXHJcbiAgICAgICBxdWVyeSgnOmVudGVyJywgW1xyXG4gICAgICAgICBzdHlsZSh7dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgtJHtUUkFOU0xBVEVfWH0lKWAsIG9wYWNpdHk6IDF9KSxcclxuICAgICAgICAgYW5pbWF0ZShgJHtBTklNQUlPTl9EVVJBVElPTn1tcyAke0FOSU1BVElPTl9UWVBFX0NVQklDX0JFWklFUn1gLCBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwJSknfSkpXHJcbiAgICAgICBdKSxcclxuICAgICAgIHF1ZXJ5KCc6bGVhdmUnLCBbXHJcbiAgICAgICAgIGFuaW1hdGUoYCR7QU5JTUFJT05fRFVSQVRJT059bXMgJHtBTklNQVRJT05fVFlQRV9DVUJJQ19CRVpJRVJ9YCwgc3R5bGUoe3RyYW5zZm9ybTogYHRyYW5zbGF0ZVgoJHtUUkFOU0xBVEVfWH0lKWB9KSlcclxuICAgICAgIF0sIHtvcHRpb25hbDogdHJ1ZX0pXHJcbiAgICAgXSkpLFxyXG4gICBdKV1cclxuICJdfQ==